[
  {
    "objectID": "posts/cyclist_trip_analysis/cyc_trip_analysis.html",
    "href": "posts/cyclist_trip_analysis/cyc_trip_analysis.html",
    "title": "CYCLIST BIKE SHARE",
    "section": "",
    "text": "The analysis is done on Cyclist Trip Data obtained from Coursera Google Data Analytics course as part of Cap Stone Project.\nThe data contains month wise travel usage of bikes from the year of 2015-2023. We will be concentrating on data gathered in between July-2022 to June-2023 which will cover an entire year.\nLet’s load the required packages first\n\nLoading the required packages i.e., pandas, numpy, matplotlib, and seaborn.\n\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns"
  },
  {
    "objectID": "posts/cyclist_trip_analysis/cyc_trip_analysis.html#introduction",
    "href": "posts/cyclist_trip_analysis/cyc_trip_analysis.html#introduction",
    "title": "CYCLIST BIKE SHARE",
    "section": "",
    "text": "The analysis is done on Cyclist Trip Data obtained from Coursera Google Data Analytics course as part of Cap Stone Project.\nThe data contains month wise travel usage of bikes from the year of 2015-2023. We will be concentrating on data gathered in between July-2022 to June-2023 which will cover an entire year.\nLet’s load the required packages first\n\nLoading the required packages i.e., pandas, numpy, matplotlib, and seaborn.\n\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns"
  },
  {
    "objectID": "posts/cyclist_trip_analysis/cyc_trip_analysis.html#loading-and-formatting-data",
    "href": "posts/cyclist_trip_analysis/cyc_trip_analysis.html#loading-and-formatting-data",
    "title": "CYCLIST BIKE SHARE",
    "section": "2 Loading and Formatting Data",
    "text": "2 Loading and Formatting Data\n\nLet’s look at the structure of the data in one of the downloaded .csv files.\n\n\ntrp_jul_22 = pd.read_csv(\"F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202207-divvy-tripdata/202207-divvy-tripdata.csv\")\n\ntrp_jul_22.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 823488 entries, 0 to 823487\nData columns (total 13 columns):\n #   Column              Non-Null Count   Dtype  \n---  ------              --------------   -----  \n 0   ride_id             823488 non-null  object \n 1   rideable_type       823488 non-null  object \n 2   started_at          823488 non-null  object \n 3   ended_at            823488 non-null  object \n 4   start_station_name  711457 non-null  object \n 5   start_station_id    711457 non-null  object \n 6   end_station_name    702537 non-null  object \n 7   end_station_id      702537 non-null  object \n 8   start_lat           823488 non-null  float64\n 9   start_lng           823488 non-null  float64\n 10  end_lat             822541 non-null  float64\n 11  end_lng             822541 non-null  float64\n 12  member_casual       823488 non-null  object \ndtypes: float64(4), object(9)\nmemory usage: 81.7+ MB\n\n\n\nLet’s look at the columns and try to understand what they represent\n\nride_id is the unique identification token generated for each ride that was initiated.\nrideable_type indicates the type of bike used for the ride.\nstarted_at and ended_at give us the time when the ride began and the ride ended respectively.\nstart_station_name and end_station_name give us the names of stations where ride began and ended respectively.\nstart_station_id and end_station_id are unique ID’s given to stations.\nstart_lat and start_lng represent co-ordinates where the ride began.\nend_lat and end_lng represent co-ordinates where the ride stopped.\nmember_casual identifies if the rider is a member or casual rider of the bike.\n\nLets load data of remaining 11 months.\n\n\ntrp_aug_22 = pd.read_csv(\"F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202208-divvy-tripdata/202208-divvy-tripdata.csv\")\ntrp_sep_22 = pd.read_csv(\"F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202209-divvy-tripdata/202209-divvy-publictripdata.csv\")\ntrp_oct_22 = pd.read_csv(\"F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202210-divvy-tripdata/202210-divvy-tripdata_raw.csv\")\ntrp_nov_22 = pd.read_csv(\"F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202211-divvy-tripdata/202211-divvy-tripdata.csv\")\ntrp_dec_22 = pd.read_csv(\"F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202212-divvy-tripdata/202212-divvy-tripdata.csv\")\ntrp_jan_23 = pd.read_csv(\"F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202301-divvy-tripdata/202301-divvy-tripdata.csv\")\ntrp_feb_23 = pd.read_csv(\"F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202302-divvy-tripdata/202302-divvy-tripdata.csv\")\ntrp_mar_23 = pd.read_csv(\"F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202303-divvy-tripdata/202303-divvy-tripdata.csv\")\ntrp_apr_23 = pd.read_csv(\"F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202304-divvy-tripdata/202304-divvy-tripdata.csv\")\ntrp_may_23 = pd.read_csv(\"F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202305-divvy-tripdata/202305-divvy-tripdata.csv\")\ntrp_jun_23 = pd.read_csv(\"F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202306-divvy-tripdata/202306-divvy-tripdata.csv\")\n\nAs structure of .csv’s is same across the all the files lets combine all the .csv files into a single data frame which contains data of all 12 months.\n\nCombining all the monthly data to one previous year data(df_1year).\n\n\ndf_1year_raw = pd.concat([trp_jul_22, trp_aug_22, trp_sep_22, trp_oct_22, trp_nov_22, \n                      trp_dec_22, trp_jan_23, trp_feb_23, trp_mar_23, \n                      trp_apr_23, trp_may_23, trp_jun_23], ignore_index=True)\n\ndf_1year_raw.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 5779444 entries, 0 to 5779443\nData columns (total 13 columns):\n #   Column              Dtype  \n---  ------              -----  \n 0   ride_id             object \n 1   rideable_type       object \n 2   started_at          object \n 3   ended_at            object \n 4   start_station_name  object \n 5   start_station_id    object \n 6   end_station_name    object \n 7   end_station_id      object \n 8   start_lat           float64\n 9   start_lng           float64\n 10  end_lat             float64\n 11  end_lng             float64\n 12  member_casual       object \ndtypes: float64(4), object(9)\nmemory usage: 573.2+ MB\n\n\n\ndf_1year data frame contains data from the month of July-2022 to June-2023."
  },
  {
    "objectID": "posts/cyclist_trip_analysis/cyc_trip_analysis.html#cleaning-the-data",
    "href": "posts/cyclist_trip_analysis/cyc_trip_analysis.html#cleaning-the-data",
    "title": "CYCLIST BIKE SHARE",
    "section": "3 Cleaning the Data",
    "text": "3 Cleaning the Data\n\nChecking and counting “NA” in each column of the data frame. Data is much better without “NA” as they can cause problems while aggregating data and calculating averages and sums. We can use map function to perform a function to all of the columns.\n\n\ndf_1year = df_1year_raw.copy()\n\ndf_1year.isna().sum()\n\nride_id                    0\nrideable_type              0\nstarted_at                 0\nended_at                   0\nstart_station_name    857860\nstart_station_id      857992\nend_station_name      915655\nend_station_id        915796\nstart_lat                  0\nstart_lng                  0\nend_lat                 5795\nend_lng                 5795\nmember_casual              0\ndtype: int64\n\n\n\nAs NA’s are not present in the times columns i.e, started_at and ended_at we don’t need to worry ourselves about NA during aggregation and manipulation of data but it is a good practice to do so.\nFinding the length or duration of the rides by making a new column ride_length in minutes and making sure that the ride_length is not negative by using if_else function. Eliminating stations where station names and longitude and latitude co-ordinates are not present.\n\n\n# Converting 'started_at' and 'ended_at' to datetime format\ndf_1year = df_1year.astype({'started_at': 'datetime64[ns]', 'ended_at': 'datetime64[ns]'})\n\n# Calculating ride length in minutes\ndf_1year['ride_length'] = (df_1year['ended_at'] - df_1year['started_at']).dt.total_seconds() / 60\n\n# Replacing negative ride lengths with NaN\ndf_1year['ride_length'] = df_1year['ride_length'].apply(lambda x:0 if x &lt; 0 else x)\n\n# Dropping rows with NaN values in 'ride_length', 'start_station_name',\n#  'end_station_name', 'start_lat', 'start_lng', 'end_lat', 'end_lng'\n\ndf_1year = ( df_1year[\n                    (df_1year['ride_length'] &gt; 0) & \n                    (df_1year['start_station_name'].notna()) & \n                    (df_1year['end_station_name'].notna()) & \n                    (df_1year['start_lat'].notna()) & \n                    (df_1year['start_lng'].notna()) & \n                    (df_1year['end_lat'].notna()) & \n                    (df_1year['end_lng'].notna())\n                    ].sort_values('ride_length', ascending=False)\n                    )\n\ndf_1year.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 4408996 entries, 717461 to 4375674\nData columns (total 14 columns):\n #   Column              Dtype         \n---  ------              -----         \n 0   ride_id             object        \n 1   rideable_type       object        \n 2   started_at          datetime64[ns]\n 3   ended_at            datetime64[ns]\n 4   start_station_name  object        \n 5   start_station_id    object        \n 6   end_station_name    object        \n 7   end_station_id      object        \n 8   start_lat           float64       \n 9   start_lng           float64       \n 10  end_lat             float64       \n 11  end_lng             float64       \n 12  member_casual       object        \n 13  ride_length         float64       \ndtypes: datetime64[ns](2), float64(5), object(7)\nmemory usage: 504.6+ MB"
  },
  {
    "objectID": "posts/cyclist_trip_analysis/cyc_trip_analysis.html#analysis-of-data",
    "href": "posts/cyclist_trip_analysis/cyc_trip_analysis.html#analysis-of-data",
    "title": "CYCLIST BIKE SHARE",
    "section": "4 Analysis of Data",
    "text": "4 Analysis of Data\n\nAggregating data by Rider type and Bike type.\n\nAggregating data to see “Average minutes per ride” grouped by “bike type” and “rider type” after removing rides less than 2 minutes (As rides less than 2 minutes tend to have the same start and stop stations).\n\n\ndf_1year_agg = (df_1year[df_1year['ride_length'] &gt;= 2]\n                     .groupby(['rideable_type', 'member_casual'])\n                     .agg(avg_ride_length=('ride_length', 'mean'),\n                          total_rides=('ride_length', 'count'),\n                          max_ride_length=('ride_length', 'max'))\n                     .round(2)\n                     .sort_values(by='avg_ride_length', ascending=False)\n                     .reset_index()\n                     )\n\ndf_1year_agg\n\n\n\n\n\n\nTable 1: Average minutes per ride\n\n\n\nrideable_type\nmember_casual\navg_ride_length\ntotal_rides\nmax_ride_length\n\n\n\n\n0\ndocked_bike\ncasual\n50.44\n136794\n32035.45\n\n\n1\nclassic_bike\ncasual\n24.80\n781530\n1497.75\n\n\n2\nelectric_bike\ncasual\n16.03\n709649\n479.98\n\n\n3\nclassic_bike\nmember\n13.49\n1630991\n1497.87\n\n\n4\nelectric_bike\nmember\n11.14\n984688\n480.00\n\n\n\n\n\n\n\n\nWe can clearly notice in Table 1 that member riders have more number of rides with both classic and electric bikes while the average ride length is higher with casual riders.\n\nCalculating and visualizing Average ride length by “Rider type”.\n\n\navg_ride_by_rideable_type = (\n    df_1year.rename(columns={'rideable_type': 'Bike Type', 'member_casual': 'Rider Type'})\n    .groupby(['Bike Type', 'Rider Type'])\n    .agg(\n        avg_ride_by_rideable_type=('ride_length', 'mean'),\n        total_rides=('ride_length', 'count')\n    )\n    .reset_index()\n)\n\nsns.set(rc={'figure.figsize':(10, 6)})\nsns.barplot(data=avg_ride_by_rideable_type,\n            x='Rider Type', y='avg_ride_by_rideable_type', hue='Bike Type')\nplt.title('Average Ride Length by Rider Type and Bike Type')\nplt.xlabel('Rider Type')\nplt.ylabel('Average Ride Length (minutes)')\nplt.legend(title='Bike Type')\nplt.xticks(rotation=45)\nplt.tight_layout(rect=[0, 0, 1, 0.96])\nplt.show()\n\n\n\n\nFigure 1: Average Ride Length by Rider type and Member type\n\n\n\n\nThe above Figure 1 clearly shows that members average ride lengths between bike types doesn’t differ much for member riders but differs with casual riders upto 8 minutes.\n\n\n\n\n\n\nNote\n\n\n\nFurther down in the analysis “docked_bike” type is dropped as no proper documentation is available in the course.\n\n\n\n\n4.1 Analysing data by Time of the year and Ride Length\n\nRide Patterns Across the Weeks and Months of the Year\n\nCalculating and visualizing ride patterns in a week for number of rides.\n\n\n# Define the order for rideable_type\nrideable_order = [\"classic_bike\", \"electric_bike\", \"docked_bike\"]\n\n# Filter out 'docked_bike'\ndf_1year_filtered = df_1year[df_1year['rideable_type'] != 'docked_bike'].copy()\n\n# Extracting month and weekday names \n\ndf_1year_filtered['month'] = df_1year_filtered['started_at'].dt.month_name()\ndf_1year_filtered['weekday'] = df_1year_filtered['started_at'].dt.day_name()\n\n# Set categorical order for rideable_type, member_casual, and month\n\ndf_1year_filtered['rideable_type'] = pd.Categorical(df_1year_filtered['rideable_type'], categories=rideable_order, ordered=True)\n\n# Set categorical order for member_casual to control legend order\nmember_order = ['member', 'casual']\ndf_1year_filtered['member_casual'] = pd.Categorical(df_1year_filtered['member_casual'], categories=member_order, ordered=True)\n\nmonth_order = ['July', 'August', 'September', 'October', 'November', 'December',\n             'January', 'February', 'March', 'April', 'May', 'June']\n\nweekday_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n\ndf_1year_filtered['month'] = pd.Categorical(df_1year_filtered['month'], categories=month_order, ordered=True)\ndf_1year_filtered['weekday'] = pd.Categorical(df_1year_filtered['weekday'], categories=weekday_order, ordered=True)\n\n# Plot \ng = sns.catplot(\n    data = df_1year_filtered,\n    x = 'weekday',\n    kind= 'count',\n    hue = 'member_casual',\n    col= 'month',\n    col_wrap= 4,\n    height= 4,\n    aspect= 1.5,\n    palette= 'Set2',\n    dodge = True\n)\n\ng.set_axis_labels(\"Weekday\", \"Number of Rides\")\ng.set_titles(col_template=\"{col_name}\")\ng.fig.suptitle(\n    \"Ride Patterns on Weekdays of each Month \\n From July-2022 to June-2023\", fontsize=18\n)\ng.add_legend(title=\"Rider Type\")\nplt.tight_layout()\nplt.show()\n\n\n\n\nFigure 2: Ride Patterns Across the Weeks of the Year\n\n\n\n\nThe above Figure 2 clearly shows how the number of rides change due to seasons. In winters the number of rides decrease very drastically may be because of temperature and snow. In Summers the number of rides are at its peak.\nThe number of rides driven by member riders increases through the week especially in working week days but for casual riders the rides increase in the weekends. The Figure 2 shows number of rides on Saturdays and Sundays by casual members overtake membership riders in the months of July and August.\nAggregating data for the visualization.\n\ndf_1year['month'] = df_1year['started_at'].dt.month_name()\ndf_1year['weekday'] = df_1year['started_at'].dt.day_name()\n\n# Set categorical order for month\nmonth_order = ['July', 'August', 'September', 'October', 'November', 'December',\n             'January', 'February', 'March', 'April', 'May', 'June']\ndf_1year['month'] = pd.Categorical(df_1year['month'], categories=month_order, ordered=True)\n\n# Set categorical order for weekday\nweekday_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\ndf_1year['weekday'] = pd.Categorical(df_1year['weekday'], categories=weekday_order, ordered=True)\n\n\nrides_on_days = df_1year.groupby(['month', 'weekday', 'member_casual']).agg(\n    avg_ride_length=('ride_length', 'mean'),\n    total_ride_length=('ride_length', 'sum'),\n    total_rides=('ride_length', 'count')\n).reset_index().sort_values(by=['month', 'weekday', 'member_casual']).round(2)\n\nrides_on_days.head(5)\n\n\n\n\n\n\n\n\nmonth\nweekday\nmember_casual\navg_ride_length\ntotal_ride_length\ntotal_rides\n\n\n\n\n0\nJuly\nMonday\ncasual\n27.10\n918148.73\n33874\n\n\n1\nJuly\nMonday\nmember\n13.22\n531467.68\n40209\n\n\n2\nJuly\nTuesday\ncasual\n22.48\n705945.77\n31404\n\n\n3\nJuly\nTuesday\nmember\n12.69\n588326.98\n46353\n\n\n4\nJuly\nWednesday\ncasual\n21.66\n704094.58\n32514\n\n\n\n\n\n\n\n\nsns.barplot(data=rides_on_days, x='weekday', y='avg_ride_length', hue='member_casual', \n            palette='Set1', errorbar=None, estimator=np.mean)\nplt.title('Average Ride Length by Weekday and Rider Type')\nplt.xlabel('Weekday')\nplt.ylabel('Average Ride Length (minutes)')\nplt.legend(title='Rider Type')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\nFigure 3: Average Ride Length by Weekday and Rider Type\n\n\n\n\nThe above Figure 3 shows that the average ride length is higher for casual riders than member riders on all the days of the week. The average ride length is highest on Saturdays and Sundays for both the rider types.\n\nsns.barplot(data=rides_on_days, x='month', y='avg_ride_length', hue='member_casual', \n            palette='Set1', errorbar=None)\nplt.title('Average Ride Length by Month and Rider Type')\nplt.xlabel('Month')\nplt.ylabel('Average Ride Length (minutes)')\nplt.legend(title='Rider Type')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\nFigure 4: Average Ride Length by Month and Rider Type\n\n\n\n\nThe above Figure 4 shows that the average ride length is higher for casual riders than member riders in all the months of the year. The average ride length is highest in the month of August for both the rider types.\n\nsns.lineplot(data=rides_on_days, x='weekday', y='total_rides', hue='member_casual', \n            palette='Set1', errorbar=None)\nplt.title('Number of Rides by Weekday and Rider Type')\nplt.xlabel('Weekday')\nplt.ylabel('Number of Rides')\nplt.legend(title='Rider Type')\nplt.show()\n\n\n\n\nFigure 5: Number of Rides by Weekday and Rider Type\n\n\n\n\nThe above Figure 5 shows that the number of rides is higher for member riders than casual riders on all the days of the week. The number of rides is meet on Saturdays for both the rider types.\n\nsns.lineplot(data=rides_on_days, x='month', y='total_rides', hue='member_casual', \n            palette='Set1', errorbar=None)\nplt.title('Number of Rides by Month and Rider Type')\nplt.xlabel('Month')\nplt.ylabel('Number of Rides')\nplt.legend(title='Rider Type')\nplt.show()\n\n\n\n\nFigure 6: Number of Rides by Month and Rider Type\n\n\n\n\nThe above Figure 6 shows that the number of rides is higher for member riders than casual riders in all the months of the year. The number of rides is highest in the month of August for both the rider types.\n\n\nRide Patterns Across the Hours of the Day\n\nCalculating and visualizing ride patterns in a day for number of rides.\n\n\n# Extracting hour from started_at\ndf_1year['hour'] = df_1year['started_at'].dt.hour.astype(str).str.zfill(2)  # Format hour as two digits\n\n# Set categorical order for hour\nhour_order = [f\"{hour:02d}\" for hour in range(24)]\n\ndf_1year['hour'] = pd.Categorical(df_1year['hour'], categories=hour_order, ordered=True)\n\nrides_by_hour = df_1year.groupby(['hour', 'member_casual']).agg(total_rides=('ride_length', 'count')).reset_index()\n\nsns.barplot(data=rides_by_hour, x='hour', y='total_rides', hue='member_casual', \n            palette='Set1', errorbar=None)\nplt.title('Ride Patterns Across the Hours of the Day')\nplt.xlabel('Hour of the Day')\nplt.ylabel('Number of Rides')\nplt.legend(title='Rider Type')\nplt.show()\n\n\n\n\nFigure 7: Ride Patterns Across the Hours of the Day\n\n\n\n\nThe above Figure 7 shows that the number of rides is higher for member riders than casual riders in the morning hours and evening hours. The number of rides is highest in the evening hours for both the rider types."
  },
  {
    "objectID": "posts/cyclist_trip_analysis/cyc_trip_analysis.html#conclusion",
    "href": "posts/cyclist_trip_analysis/cyc_trip_analysis.html#conclusion",
    "title": "CYCLIST BIKE SHARE",
    "section": "5 Conclusion",
    "text": "5 Conclusion\nThe analysis of the cyclist trip data reveals several key insights:\n\n5.1 Rider Patterns\n\nMember riders tend to use bikes more frequently than casual riders, especially during weekdays.\nCasual riders show a preference for weekends, with a significant increase in rides during Saturdays and Sundays.\n\n\n\n5.2 Ride Length\n\nThe average ride length is generally longer for casual riders compared to member riders.\nThe longest average ride lengths occur on weekends, particularly for casual riders.\n\n\n\n5.3 Seasonal Trends\n\nThe number of rides fluctuates significantly throughout the year, with peaks in summer months (July and August) and a noticeable drop in winter months (January and February).\nThe analysis indicates that weather and seasonal changes have a substantial impact on cycling patterns.\nThe data suggests that member riders maintain a more consistent usage pattern throughout the year compared to casual riders.\n\n\n\n5.4 Temporal Patterns\n\nRide patterns vary by time of day, with peak usage in the morning and evening hours.\nThe analysis highlights the importance of understanding temporal patterns to optimize bike availability and station placements."
  },
  {
    "objectID": "posts/cyclist_trip_analysis/cyc_trip_analysis.html#recommendations",
    "href": "posts/cyclist_trip_analysis/cyc_trip_analysis.html#recommendations",
    "title": "CYCLIST BIKE SHARE",
    "section": "6 Recommendations",
    "text": "6 Recommendations\n\nInfrastructure Improvements: Consider adding more bike stations in areas with high casual rider activity, especially during weekends.\nPromotional Campaigns: Encourage casual riders to become members by offering incentives, such as discounts or free trials, to increase overall ridership.\nSeasonal Promotions: Implement seasonal promotions to boost ridership during colder months, potentially by offering discounts or special events to attract casual riders.\nData-Driven Decisions: Continue to analyze ride patterns regularly to adapt to changing user behaviors and preferences, ensuring that the bike-sharing system remains efficient and user-friendly."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Ajay Shankar A",
    "section": "",
    "text": "This is a blog for projects completed successfully by me with Python programming language. This blog will include projects from basic “Exploratory Data Analysis(EDA)” to complex “Machine Learning(ML)” projects."
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Ajay Shankar A",
    "section": "1 EDUCATION",
    "text": "1 EDUCATION\n\nUniversity of Agricultural Sciences, Dharwad | Dharwad, Karnataka | Masters in Forest Biology and Tree Improvement | Sept 2019 - Nov 2022\nCollege of Forestry, Sirsi | Uttara Kannada, Karnataka | B.Sc in Forestry | Aug 2015 - April 2019"
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "Ajay Shankar A",
    "section": "2 Experience",
    "text": "2 Experience\n\nTechnical Assistant | Social Forest Department, Siruguppa | Dec 2022 - Present\nResearch Associate | EMPRI | May 2022 - Aug 2022"
  },
  {
    "objectID": "about.html#citationsprojects",
    "href": "about.html#citationsprojects",
    "title": "Ajay Shankar A",
    "section": "3 Citations(Projects)",
    "text": "3 Citations(Projects)\n\nAvailability of Wood for Handicrafts in Karnataka - Strengthening livelihoods and job creation.\nAn Assessment of Wood Availability in Karnataka"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Projects with Python",
    "section": "",
    "text": "This is a blog for projects completed successfully by me with Python programming language. This blog will include projects from basic “Exploratory Data Analysis(EDA)” to complex “Machine Learning(ML)” projects.\n\nTo find all the other projects using other tools visit my Data Science Portfolio Website\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nCYCLIST BIKE SHARE\n\n\n\n\n\n\n\nAnalysis\n\n\nCode\n\n\nEDA\n\n\n\n\n\n\n\n\n\n\n\nJun 17, 2025\n\n\nAjay Shankar A\n\n\n\n\n\n\nNo matching items"
  }
]